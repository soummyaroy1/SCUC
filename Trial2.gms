SET
INTERVAL
GEN
PVGEN
WINDGEN
THERMALGEN
RESERVEGEN
GENPARAM
COSTCURVEPARAM
SYSPARAM
BLOCK
GENBLOCK
;


*DECLARE SCALARS
SCALAR
INTERVAL_LENGTH
INTERVAL_UPDATE
NUMINTERVAL
RESERVETIME
;

*DECLARE GEN AND MAIN PARAMETERS
PARAMETERS
SYSTEMVALUE
INTERVAL_MINUTES(*)
BLOCK_COST(*,*)
BLOCK_CAP(*,*)
NOLOADCOST(*)
STARTUPCOST(*)
RESERVECOST(*)
COST_CURVE(*,*)
LOAD(*)
GENVALUE(*,*)
VG_FORECAST(*,*)
;

*DECLARE RESERVE PARAMETERS
PARAMETERS
RESERVELEVEL(INTERVAL)
;

*NEW PARAMETERS
PARAMETERS
CAPACITY_FACTOR_PV(INTERVAL)
CAPACITY_FACTOR_WIND(INTERVAL)
RAMPRATE(*)
SURAMPRATE(*)
MINRUNTIME(THERMALGEN)
MINDOWNTIME(THERMALGEN)
INITIALONPERIOD(*)
INITIALOFFPERIOD(*)
INITIALSTATUS(*)
;

$GDXIN GENERAL_MODEL_INPUT
$load GEN
$load PVGEN
$load WINDGEN
$load THERMALGEN
$load RESERVEGEN
$load GENPARAM
$load COSTCURVEPARAM
$load BLOCK
$load GENBLOCK

*LOAD DASCUC GEN AND MAIN INPUTS
$GDXIN DASCUCINPUT1
$load BLOCK_COST
$load BLOCK_CAP
$load NOLOADCOST
$load STARTUPCOST
$load RESERVECOST
$load COST_CURVE

$GDXIN DASCUCINPUT2
$load INTERVAL_LENGTH
$load NUMINTERVAL
$load INTERVAL_MINUTES
$load GENVALUE
$load INTERVAL
$load LOAD
$load VG_FORECAST
$load CAPACITY_FACTOR_PV
$load CAPACITY_FACTOR_WIND
$load RAMPRATE
$load SURAMPRATE
$load MINRUNTIME
$load MINDOWNTIME
$load RESERVETIME
$load INITIALONPERIOD
$load INITIALOFFPERIOD
$load INITIALSTATUS

ALIAS (INTERVAL,H);
ALIAS (GEN,G);

********************************** MIN RUN/DOWN TIME PARAMETERS*************
SET CHAR /CH1*CH2/;
PARAMETER UNIT(THERMALGEN,CHAR);
PARAMETER UNIT2(THERMALGEN,CHAR);
UNIT(THERMALGEN,'CH1') = NUMINTERVAL;
UNIT(THERMALGEN,'CH2') = (MINRUNTIME(THERMALGEN)-INITIALONPERIOD(THERMALGEN))*INITIALSTATUS(THERMALGEN);
PARAMETER GJ(THERMALGEN);
GJ(THERMALGEN) = SMIN(CHAR,UNIT(THERMALGEN,CHAR));
UNIT2(THERMALGEN,'CH1') = NUMINTERVAL;
UNIT2(THERMALGEN,'CH2') = (MINDOWNTIME(THERMALGEN)-INITIALOFFPERIOD(THERMALGEN))*(1-INITIALSTATUS(THERMALGEN));
PARAMETER FJ(THERMALGEN);
FJ(THERMALGEN) = SMIN(CHAR,UNIT2(THERMALGEN,CHAR));
*DISPLAY GJ,FJ;
********************************************************************************

*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*DECLARE GEN AND MAIN VARIABLES
VARIABLES
PRODCOST
OPCOST_BY_INTERVAL(INTERVAL)
TOTAL_RESERVE(INTERVAL)
;

POSITIVE VARIABLES
GEN_OPCOST_BY_INTERVAL(*,INTERVAL)
GEN_BLOCK_SCHEDULE(*,BLOCK,INTERVAL)
GEN_SCHEDULE(*,INTERVAL)
NOLOADCOST_BY_INTERVAL(INTERVAL)
STARTUPCOST_BY_INTERVAL(INTERVAL)
RESERVECOST_BY_INTERVAL(INTERVAL)
GEN_RESERVE_SCHEDULE(RESERVEGEN,INTERVAL)
;

VARIABLE
UNIT_STARTUP(*,INTERVAL)
UNIT_STATUS(*,INTERVAL)
UNIT_SHUTDOWN(*,INTERVAL)
;

UNIT_STATUS.UP(GEN,INTERVAL) = 1;
UNIT_STATUS.LO(GEN,INTERVAL) = 0;
UNIT_STARTUP.UP(GEN,INTERVAL) = 1;
UNIT_STARTUP.LO(GEN,INTERVAL) = 0;
UNIT_SHUTDOWN.UP(GEN,INTERVAL) = 1;
UNIT_SHUTDOWN.LO(GEN,INTERVAL) = 0;

*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*fix variable limits for renewable generation
*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*$ontext
EQUATIONS
OBJ1
OPCOSTA(INTERVAL)                                                                                                                    -
OPCOSTB(*,INTERVAL)
NLCOST(INTERVAL)
STUPCOST(INTERVAL)
RESCOST(INTERVAL)
Q_LOAD_BALANCE(INTERVAL)
Q_GENTOTAL(*,INTERVAL)  TOTAL BLOCK GENERATION EQUALS SCHEDULE
Q_GEN_BLOCK_LIMIT1(*,BLOCK,INTERVAL)  FOR BLOCK 1
Q_GEN_BLOCK_LIMIT2(*,BLOCK,INTERVAL)  FOR OTHER BLOCKS
Q_GENLIMIT_HIGH(*,INTERVAL)  CAPACITY CONSTRAINT
Q_GENLIMIT_HIGH2(*,INTERVAL) CAPACITY CONSTRAINT WITH RESERVES
Q_VARIABLE_FORECAST_PV(*,INTERVAL) CAPACITY FACTOR CONSTRAINT
Q_VARIABLE_FORECAST_WIND(*,INTERVAL) CAPACITY FACTOR CONSTRAINT
Q_RAMP_RATE_UP_BASIC(GEN,INTERVAL) RAMP UP LIMIT(SU)
Q_RAMP_RATE_DOWN_BASIC(GEN,INTERVAL) RAMP DOWN LIMIT
Q_RAMP_RATE_DOWN2(GEN,INTERVAL) SD RAMPS
Q_MIN_RUN_TIME(THERMALGEN,INTERVAL)  MIN RUN TIME CONSTRAINT
Q_MIN_RUN_TIME2(THERMALGEN,INTERVAL) MIN RUN TIME FOR ENDING INTERVALS
Q_UPTIME1(THERMALGEN) UT CONSTRAINT 1
Q_UPTIME2(THERMALGEN) UT CONSTRAINT 2
Q_UPTIME3(THERMALGEN,INTERVAL) UT CONSTRAINT 3
Q_DNTIME1(THERMALGEN) DT CONSTRAINT 1
Q_DNTIME2(THERMALGEN) DT CONSTRAINT 2
Q_DNTIME3(THERMALGEN,INTERVAL) DT CONSTAINT 3
Q_COMMITMENT_HARD_HI(GEN,INTERVAL)
Q_COMMITMENT_HARD_LO(GEN,INTERVAL)
Q_STARTUP(GEN,INTERVAL)  TO DETERMINE STARTUP SHUTDOWN VARIABLES
Q_STARTUP2(GEN,INTERVAL) TO DETERMINE STARTUP SHUTDOWN VARIABLES FOR INTERVAL 0
Q_STARTUP3(GEN,INTERVAL) MAKE SURE UNIT CANNOT SU AND SD SIMULTANEOUSLY
Q_RESERVE_CAPABILITY(RESERVEGEN,INTERVAL) RESERVE SCHEDULE LIES WITHIN UPPER LIMIT
Q_RESERVE_TOTAL(INTERVAL)
Q_RESERVE_BALANCE1(INTERVAL) SUM OF RESERVES EQUAL(OR GREATER) TO REQUIREMENT
Q_RESERVE_BALANCE2(INTERVAL) SUM OF RESERVES IS LESSER(OR EQUAL) TO MAX ALLOWABLE RESERVE CAPACITY
Q_RESERVE_RAMPUP_LIMIT(RESERVEGEN,INTERVAL) RESERVE RAMPUP LIMIT
;

OBJ1..
PRODCOST =E= SUM(INTERVAL, (OPCOST_BY_INTERVAL(INTERVAL)+NOLOADCOST_BY_INTERVAL(INTERVAL)+STARTUPCOST_BY_INTERVAL(INTERVAL)+RESERVECOST_BY_INTERVAL(INTERVAL)))
;

OPCOSTA(INTERVAL)..
OPCOST_BY_INTERVAL(INTERVAL) =E= SUM(GEN, GEN_OPCOST_BY_INTERVAL(GEN,INTERVAL))
;

OPCOSTB(GEN,INTERVAL)..
GEN_OPCOST_BY_INTERVAL(GEN,INTERVAL) =E= SUM(BLOCK, BLOCK_COST(GEN,BLOCK)*GEN_BLOCK_SCHEDULE(GEN,BLOCK,INTERVAL))
;

NLCOST(INTERVAL)..
NOLOADCOST_BY_INTERVAL(INTERVAL) =E= SUM(THERMALGEN, (1-UNIT_STATUS(THERMALGEN,INTERVAL))*NOLOADCOST(THERMALGEN)*GENVALUE(THERMALGEN,"CAPACITY"))
;

STUPCOST(INTERVAL)..
STARTUPCOST_BY_INTERVAL(INTERVAL) =E= SUM(GEN, UNIT_STARTUP(GEN,INTERVAL)*STARTUPCOST(GEN))
;

RESCOST(INTERVAL)..
RESERVECOST_BY_INTERVAL(INTERVAL) =E= SUM(RESERVEGEN, GEN_RESERVE_SCHEDULE(RESERVEGEN,INTERVAL)*RESERVECOST(RESERVEGEN))
;

Q_LOAD_BALANCE(INTERVAL)..
SUM(GEN,GEN_SCHEDULE(GEN,INTERVAL))=E= LOAD(INTERVAL)
;

Q_GENTOTAL(GEN,INTERVAL)..
GEN_SCHEDULE(GEN,INTERVAL) =E= SUM(BLOCK,GEN_BLOCK_SCHEDULE(GEN,BLOCK,INTERVAL))
;

Q_GEN_BLOCK_LIMIT1(GEN,BLOCK,INTERVAL)$(ORD(BLOCK) EQ 1)..
GEN_BLOCK_SCHEDULE(GEN,BLOCK,INTERVAL) =L= BLOCK_CAP(GEN,BLOCK)
;

Q_GEN_BLOCK_LIMIT2(GEN,BLOCK,INTERVAL)$(ORD(BLOCK) GT 1)..
GEN_BLOCK_SCHEDULE(GEN,BLOCK,INTERVAL) =L= BLOCK_CAP(GEN,BLOCK) - BLOCK_CAP(GEN,BLOCK-1)
;

Q_GENLIMIT_HIGH(GEN,INTERVAL)..
GEN_SCHEDULE(GEN,INTERVAL) =L= GENVALUE(GEN,"CAPACITY")*UNIT_STATUS(GEN,INTERVAL);
;

Q_GENLIMIT_HIGH2(RESERVEGEN,INTERVAL)..
GEN_SCHEDULE(RESERVEGEN,INTERVAL) + GEN_RESERVE_SCHEDULE(RESERVEGEN,INTERVAL) =L= UNIT_STATUS(RESERVEGEN,INTERVAL)*GENVALUE(RESERVEGEN,"CAPACITY")
;

Q_VARIABLE_FORECAST_PV(PVGEN,INTERVAL)..
GEN_SCHEDULE(PVGEN,INTERVAL) =L= GENVALUE(PVGEN,"CAPACITY")*CAPACITY_FACTOR_PV(INTERVAL)
;

Q_VARIABLE_FORECAST_WIND(WINDGEN,INTERVAL)..
GEN_SCHEDULE(WINDGEN,INTERVAL) =L= GENVALUE(WINDGEN,"CAPACITY")*CAPACITY_FACTOR_WIND(INTERVAL)
;

Q_RAMP_RATE_UP_BASIC(GEN,INTERVAL)$(ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(GEN,INTERVAL) - GEN_SCHEDULE(GEN,INTERVAL-1) =L= (RAMPRATE(GEN)*60*UNIT_STATUS(GEN,INTERVAL-1) + UNIT_STARTUP(GEN,INTERVAL)*SURAMPRATE(GEN)*60)
;

Q_RAMP_RATE_DOWN_BASIC(GEN,INTERVAL)$(ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(GEN,INTERVAL) - GEN_SCHEDULE(GEN,INTERVAL-1) =G= -1* (RAMPRATE(GEN)*60*UNIT_STATUS(GEN,INTERVAL-1))
;

Q_RAMP_RATE_DOWN2(GEN,INTERVAL)$(ORD(INTERVAL) LT NUMINTERVAL)..
GEN_SCHEDULE(GEN,INTERVAL) =L= (UNIT_STATUS(GEN,INTERVAL)-UNIT_SHUTDOWN(GEN,INTERVAL+1))*GENVALUE(GEN,"CAPACITY") +  UNIT_SHUTDOWN(GEN,INTERVAL)*SURAMPRATE(GEN)*60
;

$ontext
Q_MIN_RUN_TIME(GEN,INTERVAL)$(ORD(INTERVAL) LE CARD(INTERVAL) - GENVALUE(GEN,"MIN_RUN_TIME")+ 1)..
SUM(H$((ORD(H) GE (ORD(INTERVAL))) AND (ORD(H) LE (MAX(ORD(INTERVAL),ORD(INTERVAL) + GENVALUE(GEN,"MIN_RUN_TIME")-1)))),UNIT_STATUS(GEN,H))
         =G= GENVALUE(GEN,"MIN_RUN_TIME")*UNIT_STARTUP(GEN,INTERVAL)
;

Q_MIN_RUN_TIME2(GEN,INTERVAL)$(ORD(INTERVAL) GE CARD(INTERVAL) - GENVALUE(GEN,"MIN_RUN_TIME") + 2)..
SUM(H$((ORD(H) GE (ORD(INTERVAL))) AND (ORD(H) LE CARD(INTERVAL))),UNIT_STATUS(GEN,H))
         =G= (CARD(INTERVAL) - ORD(INTERVAL)+1)*UNIT_STARTUP(GEN,INTERVAL)
;

Q_MIN_DOWN_TIME(GEN,INTERVAL)$(ORD(INTERVAL) LE CARD(INTERVAL) - GENVALUE(GEN,"MIN_DOWN_TIME") + 1)..
SUM(H$((ORD(H) GE (ORD(INTERVAL))) AND (ORD(H) LE (MAX(ORD(INTERVAL),ORD(INTERVAL) + GENVALUE(GEN,"MIN_DOWN_TIME")-1)))),UNIT_STATUS(GEN,H))
         =L= GENVALUE(GEN,"MIN_DOWN_TIME")*(1-UNIT_SHUTDOWN(GEN,INTERVAL))
;

Q_MIN_DOWN_TIME2(GEN,INTERVAL)$(ORD(INTERVAL) GE CARD(INTERVAL) - GENVALUE(GEN,"MIN_DOWN_TIME") + 2)..
SUM(H$((ORD(H) GE (ORD(INTERVAL))) AND (ORD(H) LE CARD(INTERVAL))),UNIT_STATUS(GEN,H))
         =L= (CARD(INTERVAL) - ORD(INTERVAL) + 1)*(1-UNIT_SHUTDOWN(GEN,INTERVAL))
;
$offtext

Q_MIN_RUN_TIME(THERMALGEN,INTERVAL)$(ORD(INTERVAL) LE CARD(INTERVAL)-MINRUNTIME(THERMALGEN)+1)..
SUM(H$((ORD(H) GE ORD(INTERVAL)) AND (ORD(H) LE ORD(INTERVAL)+MINRUNTIME(THERMALGEN)-1)),UNIT_STATUS(THERMALGEN,INTERVAL))
         =G= MINRUNTIME(THERMALGEN)*(UNIT_STATUS(THERMALGEN,INTERVAL) - UNIT_STATUS(THERMALGEN,INTERVAL-1))
;

Q_MIN_RUN_TIME2(THERMALGEN,INTERVAL)$(ORD(INTERVAL) GE CARD(INTERVAL)-MINRUNTIME(THERMALGEN)+2)..
SUM(H$((ORD(H) GE (ORD(INTERVAL))) AND (ORD(H) LE CARD(INTERVAL))),UNIT_STATUS(THERMALGEN,H))
         =G= (CARD(INTERVAL) - ORD(INTERVAL)+1)* (UNIT_STATUS(THERMALGEN,INTERVAL) - UNIT_STATUS(THERMALGEN,INTERVAL-1))
;

************************************** NEW MRT/MDT EQNS(1/6)************************
Q_UPTIME1(THERMALGEN)$(GJ(THERMALGEN)>0)..
SUM(INTERVAL$(ORD(INTERVAL) LE GJ(THERMALGEN)),1-UNIT_STATUS(THERMALGEN,INTERVAL)) =E= 0
;

Q_UPTIME2(THERMALGEN)$(MINRUNTIME(THERMALGEN)>1)..
SUM(INTERVAL$(ORD(INTERVAL) > NUMINTERVAL-MINRUNTIME(THERMALGEN)+1),UNIT_STATUS(THERMALGEN,INTERVAL)-UNIT_STARTUP(THERMALGEN,INTERVAL)) =G= 0
;

Q_UPTIME3(THERMALGEN,INTERVAL)$(ORD(INTERVAL)>GJ(THERMALGEN) AND ORD(INTERVAL)<NUMINTERVAL-MINRUNTIME(THERMALGEN)+2 AND NOT(GJ(THERMALGEN)>NUMINTERVAL-MINRUNTIME(THERMALGEN)))..
SUM(H$((ORD(H)>ORD(INTERVAL)-1) AND (ORD(H)<ORD(INTERVAL)+MINRUNTIME(THERMALGEN))),UNIT_STATUS(THERMALGEN,INTERVAL)) =G= MINRUNTIME(THERMALGEN)*UNIT_STARTUP(THERMALGEN,INTERVAL)
;

Q_DNTIME1(THERMALGEN)$(FJ(THERMALGEN)>0)..
SUM(INTERVAL$(ORD(INTERVAL) LE FJ(THERMALGEN)),UNIT_STATUS(THERMALGEN,INTERVAL)) =E= 0
;

Q_DNTIME2(THERMALGEN)$(MINDOWNTIME(THERMALGEN)>1)..
SUM(INTERVAL$(ORD(INTERVAL) > NUMINTERVAL-MINDOWNTIME(THERMALGEN)+1),1-UNIT_STATUS(THERMALGEN,INTERVAL)-UNIT_SHUTDOWN(THERMALGEN,INTERVAL)) =G= 0
;

Q_DNTIME3(THERMALGEN,INTERVAL)$(ORD(INTERVAL)>FJ(THERMALGEN) AND ORD(INTERVAL)<NUMINTERVAL-MINDOWNTIME(THERMALGEN)+2 AND NOT(FJ(THERMALGEN)>NUMINTERVAL-MINDOWNTIME(THERMALGEN)))..
SUM(H$((ORD(H)>ORD(INTERVAL)-1) AND (ORD(H)<ORD(INTERVAL)+MINDOWNTIME(THERMALGEN))),1-UNIT_STATUS(THERMALGEN,INTERVAL)) =G= MINDOWNTIME(THERMALGEN)*UNIT_SHUTDOWN(THERMALGEN,INTERVAL)
;

***********************************************************************************

Q_COMMITMENT_HARD_HI(GEN,INTERVAL)..
UNIT_STATUS(GEN,INTERVAL) =G= 0
;

Q_COMMITMENT_HARD_LO(GEN,INTERVAL)..
UNIT_STATUS(GEN,INTERVAL) =L= 1
;

Q_STARTUP(GEN,INTERVAL)$(ORD(INTERVAL) GT 1)..
UNIT_STARTUP(GEN,INTERVAL) - UNIT_SHUTDOWN(GEN,INTERVAL) =E= UNIT_STATUS(GEN,INTERVAL) - UNIT_STATUS(GEN,INTERVAL-1)
;

Q_STARTUP2(GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
UNIT_STARTUP(GEN,INTERVAL) - UNIT_SHUTDOWN(GEN,INTERVAL) =E= UNIT_STATUS(GEN,INTERVAL) - GENVALUE(GEN,"INITIAL_STATUS")
;

Q_STARTUP3(GEN,INTERVAL)..
UNIT_STARTUP(GEN,INTERVAL) + UNIT_SHUTDOWN(GEN,INTERVAL) =L= 1
;

*$$$$$$$$$$$$ RESERVES $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Q_RESERVE_CAPABILITY(RESERVEGEN,INTERVAL)..
GEN_RESERVE_SCHEDULE(RESERVEGEN,INTERVAL) =L= GENVALUE(RESERVEGEN,"CAPACITY") - GEN_SCHEDULE(RESERVEGEN,INTERVAL)
;

Q_RESERVE_TOTAL(INTERVAL)..
TOTAL_RESERVE(INTERVAL) =E= SUM(RESERVEGEN,GEN_RESERVE_SCHEDULE(RESERVEGEN,INTERVAL))
;

Q_RESERVE_BALANCE1(INTERVAL)..
TOTAL_RESERVE(INTERVAL) =G= 0.02 * LOAD(INTERVAL)
;

Q_RESERVE_BALANCE2(INTERVAL)..
TOTAL_RESERVE(INTERVAL) =L= .1*SUM(RESERVEGEN,GENVALUE(RESERVEGEN,"CAPACITY"))
;

Q_RESERVE_RAMPUP_LIMIT(RESERVEGEN,INTERVAL)..
(GEN_RESERVE_SCHEDULE(RESERVEGEN,INTERVAL)-GEN_RESERVE_SCHEDULE(RESERVEGEN,INTERVAL-1))/RESERVETIME =L= RAMPRATE(RESERVEGEN)*60*UNIT_STATUS(RESERVEGEN,INTERVAL)
;

*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*$ontext
MODEL SCUC/
OBJ1
OPCOSTA
OPCOSTB
NLCOST
STUPCOST
RESCOST
Q_LOAD_BALANCE
Q_GENTOTAL
Q_GEN_BLOCK_LIMIT1
Q_GEN_BLOCK_LIMIT2
Q_GENLIMIT_HIGH
Q_GENLIMIT_HIGH2
Q_VARIABLE_FORECAST_PV
Q_VARIABLE_FORECAST_WIND
Q_RAMP_RATE_UP_BASIC
Q_RAMP_RATE_DOWN_BASIC
Q_RAMP_RATE_DOWN2
Q_MIN_RUN_TIME
Q_MIN_RUN_TIME2
Q_UPTIME1
Q_UPTIME2
Q_UPTIME3
Q_DNTIME1
Q_DNTIME2
Q_DNTIME3
Q_COMMITMENT_HARD_HI
Q_COMMITMENT_HARD_LO
Q_STARTUP
Q_STARTUP2
Q_STARTUP3
Q_RESERVE_CAPABILITY
Q_RESERVE_TOTAL
Q_RESERVE_BALANCE1
Q_RESERVE_BALANCE2
Q_RESERVE_RAMPUP_LIMIT
/;


SCUC.iterlim =1000000;
SCUC.optcr = 0.01;
SCUC.reslim = 1800;
option solvelink=5;
SCUC.optfile = 1;
heaplimit = 20000;

SOLVE SCUC USING MIP MINIMIZING PRODCOST;
*$offtext
